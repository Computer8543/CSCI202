/* Program Name: FuzzyMatcher.cpp
*  Author: Generated by ChatGPT through prompts from Kyle Ingersoll
*  Date last updated: 12/8/2024
*  Purpose: To create the method definitions for the FuzzyMatcher class
*/

#include "FuzzyMatcher.h"
#include <algorithm>
#include <vector>
#include <set>

// Constructor
FuzzyMatcher::FuzzyMatcher(std::unordered_map<std::string, std::set<int>> index)
    : index(index) {}

// Levenshtein Distance implementation
int FuzzyMatcher::levenshteinDistance(const std::string& s1, const std::string& s2) {
    int m = s1.size();
    int n = s2.size();
    std::vector<std::vector<int>> dp(m + 1, std::vector<int>(n + 1));

    for (int i = 0; i <= m; ++i) dp[i][0] = i;
    for (int j = 0; j <= n; ++j) dp[0][j] = j;

    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (s1[i - 1] == s2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1];
            }
            else {
                dp[i][j] = 1 + std::min({ dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] });
            }
        }
    }
    return dp[m][n];
}

// old Fuzzy match implementation, relies on C++17 and is not backwards compatible
/*std::vector<std::string> FuzzyMatcher::match(const std::string& query, int maxDistance) const {
    std::vector<std::string> matches;

    for (const auto& [word, _] : index) {
        if (levenshteinDistance(query, word) <= maxDistance) {
            matches.push_back(word);
        }
    }

    return matches;
}
*/

// new Fuzzy match implementation from ChatGPT, is backwards compatible with C++11
std::set<std::string> FuzzyMatcher::match(const std::string& query, int maxDistance) const {
    std::set<std::string> matches;

    for (const auto& pair : index) {
        const std::string& word = pair.first; // Access the word (key)
        if (levenshteinDistance(query, word) <= maxDistance) {
            matches.insert(word);
        }
    }

    return matches;
}
