/* Program Name: Screen2.cpp
*  Author: Generated by ChatGPT using prompts by Kyle Ingersoll
*  Date last updated: 12/8/2024
*  Purpose: To create method definitions for Screen 2.
*/

#include "Screen2.h"
#include <windows.h>
#include <fstream>
#include <sstream>
#include <CommCtrl.h>
#include <string>
#include <set>
#include <stdexcept>
#include <algorithm>

// Forward declaration of the window procedure
LRESULT CALLBACK Screen2WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);

Screen2* screen2Instance = nullptr; // Global pointer for the Screen2 instance

// Default constructor
Screen2::Screen2()
    : hwndExactResults(nullptr),
    hwndFuzzyResults(nullptr),
    hwndSearchBox(nullptr),
    invertedIndex(), // Default initialization
    fuzzyMatcher(invertedIndex.getIndex()) // Initialize fuzzy matcher with an empty index
{
    // Default constructor does not need to do anything else
}


void Screen2::createScreen(HINSTANCE hInstance, const std::string& filePath) {
    try {
        // Initialize the inverted index and fuzzy matcher
        invertedIndex.addFile(filePath); // Populate the index from the file
        fuzzyMatcher = FuzzyMatcher(invertedIndex.getIndex()); // Initialize the fuzzy matcher with the index
    }
    catch (const std::exception& e) {
        MessageBoxA(nullptr, e.what(), "Error", MB_ICONERROR);
        return;
    }

    // Register the window class
    WNDCLASS wc = {};
    wc.lpfnWndProc = Screen2WndProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = L"Screen2Class";

    if (!RegisterClass(&wc)) {
        MessageBox(nullptr, L"Failed to register window class!", L"Error", MB_ICONERROR);
        return;
    }

    // Create the main window
    HWND hwnd = CreateWindow(L"Screen2Class", L"Search Text File", WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 800, 600, nullptr, nullptr, hInstance, nullptr);

    if (!hwnd) {
        MessageBox(nullptr, L"Failed to create window!", L"Error", MB_ICONERROR);
        return;
    }

    screen2Instance = this; // Assign this instance to the global pointer

    // UI elements
    CreateWindow(L"STATIC", L"Input word(s) you want to search for:", WS_VISIBLE | WS_CHILD,
        20, 20, 300, 20, hwnd, nullptr, hInstance, nullptr);

    hwndSearchBox = CreateWindow(L"EDIT", L"", WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL,
        20, 50, 300, 20, hwnd, (HMENU)1, hInstance, nullptr);

    CreateWindow(L"STATIC", L"Exact Results:", WS_VISIBLE | WS_CHILD,
        20, 90, 100, 20, hwnd, nullptr, hInstance, nullptr);

    hwndExactResults = CreateWindow(L"EDIT", L"", WS_VISIBLE | WS_CHILD | WS_BORDER | ES_MULTILINE | ES_AUTOVSCROLL | ES_READONLY,
        20, 120, 350, 400, hwnd, (HMENU)2, hInstance, nullptr);

    CreateWindow(L"STATIC", L"Fuzzy Results:", WS_VISIBLE | WS_CHILD,
        400, 90, 100, 20, hwnd, nullptr, hInstance, nullptr);

    hwndFuzzyResults = CreateWindow(L"EDIT", L"", WS_VISIBLE | WS_CHILD | WS_BORDER | ES_MULTILINE | ES_AUTOVSCROLL | ES_READONLY,
        400, 120, 350, 400, hwnd, (HMENU)3, hInstance, nullptr);

    CreateWindow(L"BUTTON", L"Search", WS_VISIBLE | WS_CHILD,
        330, 50, 80, 20, hwnd, (HMENU)4, hInstance, nullptr);

    ShowWindow(hwnd, SW_SHOW);
}

LRESULT CALLBACK Screen2WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {
    switch (message) {
    case WM_COMMAND:
        if (LOWORD(wParam) == 4) { // Search button clicked
            wchar_t buffer[256];
            GetWindowTextW(screen2Instance->gethwndSearchBox(), buffer, 256);

            // Convert wchar_t to std::string
            std::wstring ws(buffer);
            std::string searchText(ws.begin(), ws.end());

            // Example maxDistance value (can be replaced with a user-provided input)
            int maxDistance = 2;

            // Perform the search
            screen2Instance->performSearch(hwnd, searchText, maxDistance);
        }
        break;

    case WM_CLOSE:
        DestroyWindow(hwnd);
        break;

    case WM_DESTROY:
        PostQuitMessage(0);
        break;

    default:
        return DefWindowProc(hwnd, message, wParam, lParam);
    }

    return 0;
}

void Screen2::performSearch(HWND hwnd, const std::string& searchText, int maxDistance) {
    // Perform exact match search: retrieve line indices
    std::set<int> exactMatches = invertedIndex.search(searchText);

    // Highlight exact match results in the exact results box
    highlightResults(hwndExactResults, exactMatches, invertedIndex);

    // Perform fuzzy match search: retrieve matching words
    std::set<std::string> fuzzyMatches = fuzzyMatcher.match(searchText, maxDistance);

    // Prepare fuzzy results text
    std::wstring fuzzyResultsText;
    for (const auto& word : fuzzyMatches) {
        fuzzyResultsText += std::wstring(word.begin(), word.end()) + L"\n";
    }

    // Display fuzzy matches in the fuzzy results box
    SetWindowTextW(hwndFuzzyResults, fuzzyResultsText.c_str());
}

void Screen2::highlightResults(HWND hwndResultsBox, const std::set<int>& matches, const InvertedIndex& index) {
    std::wstring resultsText;

    // Iterate through matched line numbers and append to results text
    for (int line : matches) {
        std::string lineText = index.getLine(line); // Retrieve the line text
        resultsText += std::wstring(lineText.begin(), lineText.end()) + L"\r\n";
    }

    // Set the text in the results box
    SetWindowTextW(hwndResultsBox, resultsText.c_str());
}

HWND Screen2::gethwndSearchBox() const {
    return hwndSearchBox;
}