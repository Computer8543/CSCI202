/* Program Name: InvertedIndex.cpp
*  Author: Generated by ChatGPT using prompts by Kyle Ingersoll
*  Date last updated: 11/30/2024
*  Purpose: To define the methods for the inverted index class
*/

#include "InvertedIndex.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <cctype>
#include <stdexcept>

// Constructor: Initialize with predefined stop words
InvertedIndex::InvertedIndex() {
    stopWords = { "the", "and", "is", "in", "at", "of", "on", "a", "to", "an" };
}

// Helper: Convert text to lowercase
std::string InvertedIndex::toLower(const std::string& str) const {
    std::string result = str;
    std::transform(result.begin(), result.end(), result.begin(), ::tolower);
    return result;
}

// Helper: Remove punctuation from a word
std::string InvertedIndex::removePunctuation(const std::string& word) const {
    std::string cleanWord;
    std::copy_if(word.begin(), word.end(), std::back_inserter(cleanWord),
        [](char c) { return std::isalnum(c); });
    return cleanWord;
}

// Helper: Tokenize a line into words
std::vector<std::string> InvertedIndex::tokenize(const std::string& line) const {
    std::istringstream stream(line);
    std::string word;
    std::vector<std::string> words;

    while (stream >> word) {
        word = removePunctuation(word); // Remove punctuation
        word = toLower(word);           // Normalize case
        if (!word.empty() && stopWords.find(word) == stopWords.end()) {
            words.push_back(word); // Exclude stop words
        }
    }
    return words;
}

// Build the inverted index from a file
void InvertedIndex::buildIndex(const std::string& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        throw std::runtime_error("Error: Could not open file.");
    }

    std::string line;
    int lineNumber = 0;

    while (std::getline(file, line)) {
        lineNumber++; // Increment line numbers
        std::vector<std::string> words = tokenize(line);

        for (const std::string& word : words) {
            index[word].insert(lineNumber); // Insert line number into the set
        }
    }
    file.close();
}

// Search for a word in the inverted index
std::set<int> InvertedIndex::search(const std::string& word) const {
    std::string lowerWord = toLower(word);
    auto it = index.find(lowerWord);

    if (it != index.end()) {
        return it->second; // Return the set of line numbers
    }
    return {}; // Return an empty set if the word is not found
}

// Print the entire inverted index
void InvertedIndex::printIndex() const {
    for (const auto& entry : index) {
        std::cout << entry.first << ": ";
        for (int line : entry.second) {
            std::cout << line << " ";
        }
        std::cout << "\n";
    }
}
