/* Program Name: InvertedIndex.cpp
*  Author: Generated by ChatGPT using prompts by Kyle Ingersoll
*  Date last updated: 12/3/2024
*  Purpose: To define the methods for the inverted index class
*/

#include "InvertedIndex.h"
#include <fstream>
#include <sstream>
#include <algorithm>

// Add file to populate the index
void InvertedIndex::addFile(const std::string& filePath) {
    std::ifstream file(filePath);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open file: " + filePath);
    }

    std::string word;
    int indexNumber = 0;
    while (file >> word) {
        // Normalize word to lowercase (optional)
        std::transform(word.begin(), word.end(), word.begin(), ::tolower);

        // Insert the word and associate it with the index number
        index[word].insert(indexNumber);
        ++indexNumber;
    }

    file.close();
}

// Exact search
std::set<int> InvertedIndex::search(const std::string& word) const {
    auto it = index.find(word);
    if (it != index.end()) {
        return it->second; // Return the set of indices
    }
    return {}; // Return an empty set if the word is not found
}

// Fuzzy search
std::set<int> InvertedIndex::fuzzySearch(const std::string& query, int maxDistance) const {
    FuzzyMatcher matcher(index); // Pass the index to FuzzyMatcher
    std::vector<std::string> matches = matcher.match(query, maxDistance);

    // Collect indices for all matching words
    std::set<int> resultIndices;
    for (const auto& match : matches) {
        auto it = index.find(match);
        if (it != index.end()) {
            resultIndices.insert(it->second.begin(), it->second.end());
        }
    }

    return resultIndices;
}

// getter function for the index
const std::unordered_map<std::string, std::set<int>>& InvertedIndex::getIndex() const {
    return index;
}